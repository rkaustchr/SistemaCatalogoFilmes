/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package janelas.sistema;

import classes.Categoria;
import classes.Filme;
import classes.Nota;
import classes.Usuario;
import java.util.ArrayList;
import java.util.HashMap;

import sistemacatalogofilmes.SistemaCatalogoFilmes;

/**
 *
 * @author Admin
 */
public class frmRecomendacoes extends javax.swing.JFrame {

    /**
     * Creates new form frmRecomendacoes
     */
    public frmRecomendacoes() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRecomendacao = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPopular = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Sistema Catálogo de Filmes (v1.0) - Recomendações");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Baseado nos seus gostos:");

        tblRecomendacao.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblRecomendacao);

        jLabel2.setText("Populares entre os usuários:");

        tblPopular.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblPopular);

        jButton1.setText("Ok");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(15, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(173, 173, 173)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(416, 367));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        HashMap<Categoria, Integer> minhasCategorias = new HashMap<>();
        HashMap<Filme, Integer> hmFilmesQtd = new HashMap<>();
        HashMap<Filme, Integer> hmFilmesNotas = new HashMap<>();
        HashMap<Filme, Float> hmFilmesMedias = new HashMap<>();
        ArrayList<Filme> filmesAssistidos = new ArrayList<>();
        Usuario eu = SistemaCatalogoFilmes.usuarioLogado;
        
        int i;
        for ( i=0; i < SistemaCatalogoFilmes.bancoNotas.size(); i++) {
            Nota nota = SistemaCatalogoFilmes.bancoNotas.get(i);
            
            // Adiciona a minha lista de assistidos, e a categoria
            if ( nota.getUsuario().equals( eu ) ) {
                // Add assistidos
                filmesAssistidos.add(nota.getFilme());
                
                // Add Categorias
                int j;
                for ( j=0; j < nota.getFilme().getCategorias().size(); j++) {
                    if ( minhasCategorias.containsKey(nota.getFilme().getCategorias().get(j)) ) {
                        minhasCategorias.put(nota.getFilme().getCategorias().get(j), minhasCategorias.remove(nota.getFilme().getCategorias().get(j)) + 1);
                    } else {
                        minhasCategorias.put(nota.getFilme().getCategorias().get(j), 1);
                    }
                }
            } 
            // Senão foi uma nota que eu dei, adiciono a lista de possoveis recomendações
            else {
                // Testa se o filme já está na lista
                if ( hmFilmesQtd.containsKey(nota.getFilme()) ) {
                    hmFilmesQtd.put(nota.getFilme(), hmFilmesQtd.remove(nota.getFilme()) + 1);
                    hmFilmesNotas.put(nota.getFilme(), hmFilmesNotas.remove(nota.getFilme()) + nota.getNota());
                } else {
                    hmFilmesQtd.put(nota.getFilme(), 1);
                    hmFilmesNotas.put(nota.getFilme(), nota.getNota());
                }
            }
            
        }
        
        // Nesse ponto já tenho todas as notas e categorias
        // Calculo as médias
        for ( i=0; i < SistemaCatalogoFilmes.filmes.size(); i++ ) {
            Filme filme = SistemaCatalogoFilmes.filmes.get(i);
            if ( hmFilmesNotas.containsKey(filme) ) {
                hmFilmesMedias.put( filme, hmFilmesNotas.get(filme) / (float) hmFilmesQtd.get(filme) );
            }
        }
        
        // Removo os filmes que já foram assistidos
        for ( i=0; i < filmesAssistidos.size(); i++ ) {
            hmFilmesMedias.remove(filmesAssistidos.get(i));
        }
        
        // Separo a categoria mais vista
        Categoria categoriaFavorita = null;
        int tot = 0;
        for (i=0; i < SistemaCatalogoFilmes.categorias.size(); i++ ) {
            if ( minhasCategorias.containsKey( SistemaCatalogoFilmes.categorias.get(i) ) ) {
                if ( minhasCategorias.get(SistemaCatalogoFilmes.categorias.get(i) ) > tot ) {
                    categoriaFavorita = SistemaCatalogoFilmes.categorias.get(i);
                    tot = minhasCategorias.get(SistemaCatalogoFilmes.categorias.get(i));
                }
            }
        }
        
        // Agora separo os filmes mais bem avaliados na categoria favorita e 
        // os filmes mais bem avaliados pelo público em geral
        int MAX_RECOMENDACAO = 10;
        String mRecomendacao[][] = new String[MAX_RECOMENDACAO][3]; // Cod, Nome, Media
        String mPopular[][] = new String[MAX_RECOMENDACAO][3];  // Cod, Nome, Media
        int contRecomendacao = -1;
        int contPopular = -1;
        
        for (i=0; i < SistemaCatalogoFilmes.filmes.size(); i++ ) {
            Filme filme = SistemaCatalogoFilmes.filmes.get(i);
            if ( hmFilmesMedias.containsKey(filme) ) {
                // Testo se está na recomendacao
                if ( filme.getCategorias().contains(categoriaFavorita) ) {
                    if ( contRecomendacao < 0 ) {
                        mRecomendacao[0][0] = String.valueOf( filme.getCodigo() );
                        mRecomendacao[0][1] = filme.getNome();
                        mRecomendacao[0][2] = String.valueOf( hmFilmesMedias.get(filme) );
                        contRecomendacao = 0;
                    } else if ( contRecomendacao+1 < MAX_RECOMENDACAO )  {
                        contRecomendacao++;
                        mRecomendacao[contRecomendacao][0] = String.valueOf( filme.getCodigo() );
                        mRecomendacao[contRecomendacao][1] = filme.getNome();
                        mRecomendacao[contRecomendacao][2] = String.valueOf( hmFilmesMedias.get(filme) );
                    } else {
                        if ( hmFilmesMedias.get(filme) > Float.parseFloat( mRecomendacao[contRecomendacao][2] ) ) {
                            mRecomendacao[contRecomendacao][0] = String.valueOf( filme.getCodigo() );
                            mRecomendacao[contRecomendacao][1] = filme.getNome();
                            mRecomendacao[contRecomendacao][2] = String.valueOf( hmFilmesMedias.get(filme) );
                        }
                    }

                    // Insertion Sort,
                    int j;
                    for ( j = contRecomendacao; j > 0; j-- ) {
                        if ( Float.parseFloat( mRecomendacao[j][2] ) >  Float.parseFloat( mRecomendacao[j-1][2] )  ) {
                            String aux;
                            
                            // Codigo
                            aux = mRecomendacao[j][0];
                            mRecomendacao[j][0] = mRecomendacao[j-1][0];
                            mRecomendacao[j-1][0] = aux;
                            
                            // Nomes
                            aux = mRecomendacao[j][1];
                            mRecomendacao[j][1] = mRecomendacao[j-1][1];
                            mRecomendacao[j-1][1] = aux;

                            // Medias
                            aux = mRecomendacao[j][2];
                            mRecomendacao[j][2] = mRecomendacao[j-1][2];
                            mRecomendacao[j-1][2] = aux;
                        }
                    }
                }
                // Se não está nas recomendações testo se está nos
                // mais bem avaliados
                else {
                    if ( contPopular < 0 ) {
                        mPopular[0][0] = String.valueOf( filme.getCodigo() );
                        mPopular[0][1] = filme.getNome();
                        mPopular[0][2] = String.valueOf( hmFilmesMedias.get(filme) );
                        contPopular = 0;
                    } else if ( contPopular+1 < MAX_RECOMENDACAO )  {
                        contPopular++;
                        mPopular[contPopular][0] = String.valueOf( filme.getCodigo() );
                        mPopular[contPopular][1] = filme.getNome();
                        mPopular[contPopular][2] = String.valueOf( hmFilmesMedias.get(filme) );
                    } else {
                        if ( hmFilmesMedias.get(filme) > Float.parseFloat( mPopular[contPopular][2] ) ) {
                            mPopular[contPopular][0] = String.valueOf( filme.getCodigo() );
                            mPopular[contPopular][1] = filme.getNome();
                            mPopular[contPopular][2] = String.valueOf( hmFilmesMedias.get(filme) );
                        }
                    }

                    // Insertion Sort,
                    int j;
                    for ( j = contPopular; j > 0; j-- ) {
                        if ( Float.parseFloat( mPopular[j][2] ) >  Float.parseFloat( mPopular[j-1][2] )  ) {
                            String aux;
                            
                            // Codigo
                            aux = mPopular[j][0];
                            mPopular[j][0] = mPopular[j-1][0];
                            mPopular[j-1][0] = aux;
                            
                            // Nomes
                            aux = mPopular[j][1];
                            mPopular[j][1] = mPopular[j-1][1];
                            mPopular[j-1][1] = aux;

                            // Medias
                            aux = mPopular[j][2];
                            mPopular[j][2] = mPopular[j-1][2];
                            mPopular[j-1][2] = aux;
                        }
                    }
                }
                
            }             
        }
        
        
        // Coloco os dados nas tabelas
        String colunas[] = { "Código", "Nome", "Média" };    
        tblRecomendacao.setModel(new javax.swing.table.DefaultTableModel(
            mRecomendacao,
            colunas
        ));
        
        tblPopular.setModel(new javax.swing.table.DefaultTableModel(
            mPopular,
            colunas
        ));
    }//GEN-LAST:event_formWindowOpened

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmRecomendacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmRecomendacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmRecomendacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmRecomendacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmRecomendacoes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblPopular;
    private javax.swing.JTable tblRecomendacao;
    // End of variables declaration//GEN-END:variables
}
