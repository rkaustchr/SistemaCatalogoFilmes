/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package janelas;

import classes.Categoria;
import classes.Filme;
import classes.Nota;
import classes.Usuario;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import sistemacatalogofilmes.SistemaCatalogoFilmes;
import static sistemacatalogofilmes.SistemaCatalogoFilmes.categorias;

/**
 *
 * @author rafael
 */
public class frmLoading extends javax.swing.JFrame {

    /**
     * Creates new form frmLoading
     */
    public frmLoading() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        pgbProgresso = new javax.swing.JProgressBar();
        lblMensagem = new javax.swing.JLabel();
        lblPath = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Sistema Cat치logo de Filmes (v1.0) - Splash Screen");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Sistema de Cat치logo de Filmes");

        jLabel2.setText("Carregando Banco de Dados");

        lblMensagem.setText("_________");

        lblPath.setText("Path: XYZ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(pgbProgresso, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMensagem)))
                    .addComponent(lblPath))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addGap(43, 43, 43)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pgbProgresso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMensagem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addComponent(lblPath))
        );

        setSize(new java.awt.Dimension(410, 232));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // /home/rk/workspaceEE/.metadata/
        String path = getClass().getResource(getClass().getSimpleName() + ".class").getPath();  
        // /home/rk/workspaceEE/
        path = path.substring(0, path.indexOf("/build"));
        path = path + "/BD/";
        
        lblPath.setText("Path: " + path);
        
        // 100,000 ratings (1-5) from 943 users on 1682 movies

        
        // Carrega as Categorias
        categorias.add(new Categoria(0, "unknown"));
        categorias.add(new Categoria(1, "Action"));
        categorias.add(new Categoria(2, "Adventure"));
        categorias.add(new Categoria(3, "Animation"));
        categorias.add(new Categoria(4, "Children's"));
        categorias.add(new Categoria(5, "Comedy"));
        categorias.add(new Categoria(6, "Crime"));
        categorias.add(new Categoria(7, "Documentary"));
        categorias.add(new Categoria(8, "Drama"));
        categorias.add(new Categoria(9, "Fantasy"));
        categorias.add(new Categoria(10, "Film-Noir"));
        categorias.add(new Categoria(11, "Horror"));
        categorias.add(new Categoria(12, "Musical"));
        categorias.add(new Categoria(13, "Mystery"));
        categorias.add(new Categoria(14, "Romance"));
        categorias.add(new Categoria(15, "Sci-Fi"));
        categorias.add(new Categoria(16, "Thriller"));
        categorias.add(new Categoria(17, "War"));
        categorias.add(new Categoria(18, "Western"));
        
        int progresso = 0;
        pgbProgresso.setMinimum(0);
        pgbProgresso.setMaximum(102625);
        pgbProgresso.setValue(0);
        
        // Carrega os Filmes
        lblMensagem.setText("Carregando filmes ...");
        //movie id | movie title | release date | video release date |
        //       IMDb URL | unknown | Action | Adventure | Animation |
        //       Children's | Comedy | Crime | Documentary | Drama | Fantasy |
        //       Film-Noir | Horror | Musical | Mystery | Romance | Sci-Fi |
        //       Thriller | War | Western |
        BufferedReader buffRead;
        try {
            buffRead = new BufferedReader(new FileReader(path + "u.item"));
            String linha = buffRead.readLine();
            while (true) {
                if (linha != null && !linha.isEmpty()) {
                    String[] campos = linha.split("\\|");
                    ArrayList<Categoria> cat = new ArrayList<>();
                    int i, k;
                    for ( i=5, k=0; i < 24; i++, k++ ) {
                        if ( campos[i].equals("1") ) {
                            cat.add( categorias.get(k) );
                        }
                    }
                    Filme filme = new Filme(Integer.parseInt(campos[0]), campos[1], campos[2], campos[3], campos[4], cat);
                    SistemaCatalogoFilmes.filmes.add(filme);

                } else
                        break;
                linha = buffRead.readLine();

                progresso++;
                pgbProgresso.setValue(progresso);
            }
            buffRead.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(frmLoading.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(frmLoading.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // Carrega os Usu치rios
        lblMensagem.setText("Carregando usu치rios ...");
        //u.user     -- Demographic information about the users; this is a tab
        //      separated list of
        //      user id | age | gender | occupation | zip code
        //      The user ids are the ones used in the u.data data set.
        try {
            buffRead = new BufferedReader(new FileReader(path + "u.user"));
            String linha = buffRead.readLine();
            while (true) {
                if (linha != null && !linha.isEmpty()) {
                    String[] campos = linha.split("\\|");
                    Usuario usuario = new Usuario(Integer.parseInt(campos[0]), campos[0], Integer.parseInt(campos[1]), campos[2], campos[3], campos[4]);
                    SistemaCatalogoFilmes.usuarios.add(usuario);
                } else
                        break;
                linha = buffRead.readLine();
                progresso++;
                pgbProgresso.setValue(progresso);
            }
            buffRead.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(frmLoading.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(frmLoading.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // Carrega as Notas
        lblMensagem.setText("Carregando notas");
        //u.data     -- The full u data set, 100000 ratings by 943 users on 1682 items.
        //      Each user has rated at least 20 movies.  Users and items are
        //      numbered consecutively from 1.  The data is randomly
        //      ordered. This is a tab separated list of 
	//         user id | item id | rating | timestamp. 
        //      The time stamps are unix seconds since 1/1/1970 UTC
        try {
            buffRead = new BufferedReader(new FileReader(path + "u.data"));
            String linha = buffRead.readLine();
            while (true) {
                if (linha != null && !linha.isEmpty() ) {
                    String[] campos = linha.split("\t");
                    Nota nota = new Nota(SistemaCatalogoFilmes.filmes.get(Integer.parseInt(campos[1])-1), SistemaCatalogoFilmes.usuarios.get(Integer.parseInt(campos[0])-1), Integer.parseInt(campos[2]));
                    SistemaCatalogoFilmes.bancoNotas.add(nota);
                } else
                        break;
                linha = buffRead.readLine();
                progresso++;
                pgbProgresso.setValue(progresso);
            }
            buffRead.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(frmLoading.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(frmLoading.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        this.dispose();
       
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmLoading.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmLoading.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmLoading.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmLoading.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmLoading().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblMensagem;
    private javax.swing.JLabel lblPath;
    private javax.swing.JProgressBar pgbProgresso;
    // End of variables declaration//GEN-END:variables
}
